#include <catch2/catch.hpp>
#include <disiple/fir.hpp>
#include <type_traits>

using namespace Eigen;
using namespace disiple;

static const size_t nchan = 4;
static const size_t ndata = 50;
static const size_t ndyn_design = 9;
static const size_t nstat_design = 3;

namespace {
    template <typename Scalar> Scalar threshold();
    template <> float  threshold<float>()  { return 1e-4f; }
    template <> double threshold<double>() { return 1e-10; }
}

template <typename Scalar>
struct TestFixtureFIR
{
    // data is channels x time
    Array<Scalar, Dynamic, Dynamic>  raw_data, fir_data, lp_data, hp_data, bs_data, bp_data;
    Array<Scalar, 5, 1>  fir_params;

    TestFixtureFIR()
    : raw_data(nchan, ndata)
    , fir_data(nchan, ndata)
    , lp_data(nchan, ndata)
    , hp_data(nchan, ndata)
    , bs_data(nchan, ndata)
    , bp_data(nchan, ndata)
    {
        // fill data with sawtooth signal
        for (size_t t=0; t<ndata; ++t)
            for (size_t c=0; c<nchan; ++c)
                raw_data(c,t) = (t + c) % 16;

        // b = [.4 .2 .3 -.2 .3]; a = 1;
        fir_params << .4, .2, .3, -.2, .3;
        fir_data <<
        0.0,  0.4,  1.0,  1.9,  2.6,  3.6,  4.6,  5.6,  6.6,  7.6,  8.6,  9.6, 10.6, 11.6, 12.6, 13.6,  8.2,  6.0,  2.2,  6.4,  2.6,  3.6,  4.6,  5.6,  6.6,  7.6,  8.6,  9.6, 10.6, 11.6, 12.6, 13.6,  8.2,  6.0,  2.2,  6.4,  2.6,  3.6,  4.6,  5.6,  6.6,  7.6,  8.6,  9.6, 10.6, 11.6, 12.6, 13.6,  8.2,  6.0,
        0.4,  1.0,  1.9,  2.6,  3.6,  4.6,  5.6,  6.6,  7.6,  8.6,  9.6, 10.6, 11.6, 12.6, 13.6,  8.2,  6.0,  2.2,  6.4,  2.6,  3.6,  4.6,  5.6,  6.6,  7.6,  8.6,  9.6, 10.6, 11.6, 12.6, 13.6,  8.2,  6.0,  2.2,  6.4,  2.6,  3.6,  4.6,  5.6,  6.6,  7.6,  8.6,  9.6, 10.6, 11.6, 12.6, 13.6,  8.2,  6.0,  2.2,
        0.8,  1.6,  2.8,  3.3,  4.6,  5.6,  6.6,  7.6,  8.6,  9.6, 10.6, 11.6, 12.6, 13.6,  8.2,  6.0,  2.2,  6.4,  2.6,  3.6,  4.6,  5.6,  6.6,  7.6,  8.6,  9.6, 10.6, 11.6, 12.6, 13.6,  8.2,  6.0,  2.2,  6.4,  2.6,  3.6,  4.6,  5.6,  6.6,  7.6,  8.6,  9.6, 10.6, 11.6, 12.6, 13.6,  8.2,  6.0,  2.2,  6.4,
        1.2,  2.2,  3.7,  4.0,  5.6,  6.6,  7.6,  8.6,  9.6, 10.6, 11.6, 12.6, 13.6,  8.2,  6.0,  2.2,  6.4,  2.6,  3.6,  4.6,  5.6,  6.6,  7.6,  8.6,  9.6, 10.6, 11.6, 12.6, 13.6,  8.2,  6.0,  2.2,  6.4,  2.6,  3.6,  4.6,  5.6,  6.6,  7.6,  8.6,  9.6, 10.6, 11.6, 12.6, 13.6,  8.2,  6.0,  2.2,  6.4,  2.6;

        /*  script to generate the data below:

            x = [ mod(0:49,16); mod(1:50,16); mod(2:51,16); mod(3:52,16) ]';

            mf = 9; mp = 15;
            n = mf+1+mp;
            n2 = 2^ceil(log2(n));

            wf = blackman(mf*2+1+2)'; wf = wf(2:mf+1);
            wp = blackman(mp*2+1+2)'; wp = wp(mp+3:end-1);
            w = [wf 1 wp];

            f1 = .234; f2 = .456;

            lp = @(f) f*sinc(f*(-mf:mp));
            lp2hp = @(x) [zeros(1,mf) 1 zeros(1,mp)] - x;
            hp = @(f) lp2hp(lp(f));

            norm_gn  = @(x) x / max(abs(fft([x zeros(1, n2-n)])));
            norm_dc = @(x) (x-w*sum(x)/sum(w));

            %b = w.*lp(f1); b = norm_gn(b);
            %b = w.*hp(f2); b = norm_gn(norm_dc(b));
            %b = w.*(lp(f1) + hp(f2)); b = norm_gn(b);
            %b = w.*lp2hp(lp(f2) + hp(f1)); b = norm_gn(norm_dc(b));
            fprintf('b = \n'); fprintf('%28.25f, ', b); fprintf('\n');

            y = filter(single(b),1,single(x));

            fprintf('y = \n');
            for i=1:size(y,2)
                fprintf('%25.18e, ', y(:,i));
                fprintf('\n');
            end
            fprintf('\n');
        */

        lp_data <<
        0.000000000000000000e+00,  1.065301694325171411e-04, -4.145941929891705513e-04, -5.129185970872640610e-03, -2.003775537014007568e-02, -4.599006474018096924e-02, -6.382187455892562866e-02, -2.263059467077255249e-02,  1.533486247062683105e-01,  5.348020195960998535e-01,  1.150796651840209961e+00,  1.977412819862365723e+00,  2.952986955642700195e+00,  4.002758026123046875e+00,  5.064850807189941406e+00,  6.105274200439453125e+00,  7.115823745727539062e+00,  8.119771003723144531e+00,  9.175464630126953125e+00,  1.033004760742187500e+01,  1.150303745269775391e+01,  1.237254810333251953e+01,  1.242862033843994141e+01,  1.127234077453613281e+01,  8.984829902648925781e+00,  6.232166290283203125e+00,  3.862228393554687500e+00,  2.478900194168090820e+00,  2.291744232177734375e+00,  3.094591140747070312e+00,  4.441322326660156250e+00,  5.892015457153320312e+00,  7.183899879455566406e+00,  8.278851509094238281e+00,  9.299863815307617188e+00,  1.038598823547363281e+01,  1.151229095458984375e+01,  1.236632823944091797e+01,  1.242376041412353516e+01,  1.127121925354003906e+01,  8.984829902648925781e+00,  6.232166290283203125e+00,  3.862228393554687500e+00,  2.478900194168090820e+00,  2.291744232177734375e+00,  3.094591140747070312e+00,  4.441322326660156250e+00,  5.892015457153320312e+00,  7.183899879455566406e+00,  8.278851509094238281e+00,
        1.065301694325171411e-04, -4.145941929891705513e-04, -5.129185970872640610e-03, -2.003775537014007568e-02, -4.599006474018096924e-02, -6.382187455892562866e-02, -2.263059467077255249e-02,  1.533486247062683105e-01,  5.348020195960998535e-01,  1.150796651840209961e+00,  1.977412819862365723e+00,  2.952986955642700195e+00,  4.002758026123046875e+00,  5.064850807189941406e+00,  6.105274200439453125e+00,  7.115823745727539062e+00,  8.119771003723144531e+00,  9.175464630126953125e+00,  1.033004760742187500e+01,  1.150303745269775391e+01,  1.237254810333251953e+01,  1.242862033843994141e+01,  1.127234077453613281e+01,  8.984829902648925781e+00,  6.232166290283203125e+00,  3.862228393554687500e+00,  2.478900194168090820e+00,  2.291744232177734375e+00,  3.094591140747070312e+00,  4.441322326660156250e+00,  5.892015457153320312e+00,  7.183899879455566406e+00,  8.278851509094238281e+00,  9.299863815307617188e+00,  1.038598823547363281e+01,  1.151229095458984375e+01,  1.236632823944091797e+01,  1.242376041412353516e+01,  1.127121925354003906e+01,  8.984829902648925781e+00,  6.232166290283203125e+00,  3.862228393554687500e+00,  2.478900194168090820e+00,  2.291744232177734375e+00,  3.094591140747070312e+00,  4.441322326660156250e+00,  5.892015457153320312e+00,  7.183899879455566406e+00,  8.278851509094238281e+00,  9.299863815307617188e+00,
        2.130603388650342822e-04, -9.357185917906463146e-04, -9.843776933848857880e-03, -3.494632616639137268e-02, -7.194238156080245972e-02, -8.165367692708969116e-02,  1.856068335473537445e-02,  3.293278217315673828e-01,  9.162552356719970703e-01,  1.766791820526123047e+00,  2.804028987884521484e+00,  3.928560972213745117e+00,  5.052529335021972656e+00,  6.126944541931152344e+00,  7.143992424011230469e+00,  8.138120651245117188e+00,  9.180770874023437500e+00,  1.032716751098632812e+01,  1.149822521209716797e+01,  1.236939716339111328e+01,  1.242761707305908203e+01,  1.127245330810546875e+01,  8.985083580017089844e+00,  6.232240676879882812e+00,  3.862228393554687500e+00,  2.478900194168090820e+00,  2.291744232177734375e+00,  3.094591140747070312e+00,  4.441322326660156250e+00,  5.892015457153320312e+00,  7.183899879455566406e+00,  8.278851509094238281e+00,  9.299863815307617188e+00,  1.038598823547363281e+01,  1.151229095458984375e+01,  1.236632823944091797e+01,  1.242376041412353516e+01,  1.127121925354003906e+01,  8.984829902648925781e+00,  6.232166290283203125e+00,  3.862228393554687500e+00,  2.478900194168090820e+00,  2.291744232177734375e+00,  3.094591140747070312e+00,  4.441322326660156250e+00,  5.892015457153320312e+00,  7.183899879455566406e+00,  8.278851509094238281e+00,  9.299863815307617188e+00,  1.038598823547363281e+01,
        3.195905010215938091e-04, -1.456842874176800251e-03, -1.455836929380893707e-02, -4.985489696264266968e-02, -9.789466857910156250e-02, -9.948549419641494751e-02,  5.975196510553359985e-02,  5.053070187568664551e-01,  1.297708749771118164e+00,  2.382786989212036133e+00,  3.630645275115966797e+00,  4.904134750366210938e+00,  6.102300643920898438e+00,  7.187333583831787109e+00,  8.194457054138183594e+00,  9.217470169067382812e+00,  1.033777999877929688e+01,  1.149246501922607422e+01,  1.235977458953857422e+01,  1.242131900787353516e+01,  1.127044963836669922e+01,  8.985308647155761719e+00,  6.232749938964843750e+00,  3.862378120422363281e+00,  2.478900194168090820e+00,  2.291744232177734375e+00,  3.094591140747070312e+00,  4.441322326660156250e+00,  5.892015457153320312e+00,  7.183899879455566406e+00,  8.278851509094238281e+00,  9.299863815307617188e+00,  1.038598823547363281e+01,  1.151229095458984375e+01,  1.236632823944091797e+01,  1.242376041412353516e+01,  1.127121925354003906e+01,  8.984829902648925781e+00,  6.232166290283203125e+00,  3.862228393554687500e+00,  2.478900194168090820e+00,  2.291744232177734375e+00,  3.094591140747070312e+00,  4.441322326660156250e+00,  5.892015457153320312e+00,  7.183899879455566406e+00,  8.278851509094238281e+00,  9.299863815307617188e+00,  1.038598823547363281e+01,  1.151229095458984375e+01;

        hp_data <<
        0.000000000000000000e+00, -1.043749580276198685e-04,  1.221223850734531879e-03,  5.161676090210676193e-03,  1.246480736881494522e-03, -1.934681460261344910e-02, -1.863759197294712067e-02,  4.899192228913307190e-02,  7.972857356071472168e-02, -1.922652572393417358e-01,  7.971283793449401855e-02,  4.137737676501274109e-02, -3.772958740592002869e-02, -3.271169587969779968e-02,  4.630794283002614975e-03,  9.246338158845901489e-03, -6.175149232149124146e-03, -3.470414131879806519e-02, -7.010098546743392944e-02,  5.920857191085815430e-02,  3.242961764335632324e-01, -1.814482361078262329e-02, -1.088714241981506348e+00, -4.980816841125488281e-01,  4.345642566680908203e+00, -4.357909202575683594e+00,  6.071091294288635254e-01,  1.259451031684875488e+00, -8.654526621103286743e-02, -6.037377715110778809e-01, -8.010794222354888916e-02,  2.672027945518493652e-01,  8.580386638641357422e-02, -1.305228918790817261e-01, -1.272105723619461060e-01,  8.457679301500320435e-02,  3.488358855247497559e-01, -2.009223029017448425e-02, -1.093879818916320801e+00, -4.986212253570556641e-01,  4.345642566680908203e+00, -4.357909202575683594e+00,  6.071091294288635254e-01,  1.259451031684875488e+00, -8.654526621103286743e-02, -6.037377715110778809e-01, -8.010794222354888916e-02,  2.672027945518493652e-01,  8.580386638641357422e-02, -1.305228918790817261e-01,
        -1.043749580276198685e-04,  1.221223850734531879e-03,  5.161676090210676193e-03,  1.246480736881494522e-03, -1.934681460261344910e-02, -1.863759197294712067e-02,  4.899192228913307190e-02,  7.972857356071472168e-02, -1.922652572393417358e-01,  7.971283793449401855e-02,  4.137737676501274109e-02, -3.772958740592002869e-02, -3.271169587969779968e-02,  4.630794283002614975e-03,  9.246338158845901489e-03, -6.175149232149124146e-03, -3.470414131879806519e-02, -7.010098546743392944e-02,  5.920857191085815430e-02,  3.242961764335632324e-01, -1.814482361078262329e-02, -1.088714241981506348e+00, -4.980816841125488281e-01,  4.345642566680908203e+00, -4.357909202575683594e+00,  6.071091294288635254e-01,  1.259451031684875488e+00, -8.654526621103286743e-02, -6.037377715110778809e-01, -8.010794222354888916e-02,  2.672027945518493652e-01,  8.580386638641357422e-02, -1.305228918790817261e-01, -1.272105723619461060e-01,  8.457679301500320435e-02,  3.488358855247497559e-01, -2.009223029017448425e-02, -1.093879818916320801e+00, -4.986212253570556641e-01,  4.345642566680908203e+00, -4.357909202575683594e+00,  6.071091294288635254e-01,  1.259451031684875488e+00, -8.654526621103286743e-02, -6.037377715110778809e-01, -8.010794222354888916e-02,  2.672027945518493652e-01,  8.580386638641357422e-02, -1.305228918790817261e-01, -1.272105723619461060e-01,
        -2.087499160552397370e-04,  2.546822652220726013e-03,  9.102129377424716949e-03, -2.668715314939618111e-03, -3.994010388851165771e-02, -1.792837493121623993e-02,  1.166214421391487122e-01,  1.104652285575866699e-01, -4.642590880393981934e-01,  3.516909480094909668e-01,  3.041838295757770538e-03, -1.168365105986595154e-01, -2.769375778734683990e-02,  4.197310283780097961e-02,  1.553189381957054138e-02, -4.614608734846115112e-02, -8.219143003225326538e-02,  6.203049421310424805e-02,  3.296772837638854980e-01, -1.830671355128288269e-02, -1.090469717979431152e+00, -4.982731342315673828e-01,  4.345953464508056641e+00, -4.357873439788818359e+00,  6.071091294288635254e-01,  1.259451031684875488e+00, -8.654526621103286743e-02, -6.037377715110778809e-01, -8.010794222354888916e-02,  2.672027945518493652e-01,  8.580386638641357422e-02, -1.305228918790817261e-01, -1.272105723619461060e-01,  8.457679301500320435e-02,  3.488358855247497559e-01, -2.009223029017448425e-02, -1.093879818916320801e+00, -4.986212253570556641e-01,  4.345642566680908203e+00, -4.357909202575683594e+00,  6.071091294288635254e-01,  1.259451031684875488e+00, -8.654526621103286743e-02, -6.037377715110778809e-01, -8.010794222354888916e-02,  2.672027945518493652e-01,  8.580386638641357422e-02, -1.305228918790817261e-01, -1.272105723619461060e-01,  8.457679301500320435e-02,
        -3.131248813588172197e-04,  3.872421570122241974e-03,  1.304258126765489578e-02, -6.583910901099443436e-03, -6.053339689970016479e-02, -1.721915416419506073e-02,  1.842509806156158447e-01,  1.412018835544586182e-01, -7.362529039382934570e-01,  6.236690878868103027e-01, -3.529376909136772156e-02, -1.959432512521743774e-01, -2.267588302493095398e-02,  8.098542690277099609e-02, -2.732209628447890282e-03, -1.050750836730003357e-01,  3.784960508346557617e-02,  3.353208899497985840e-01, -7.544675376266241074e-03, -1.090793490409851074e+00, -5.017838478088378906e-01,  4.345571041107177734e+00, -4.357251644134521484e+00,  6.071811318397521973e-01,  1.259451031684875488e+00, -8.654526621103286743e-02, -6.037377715110778809e-01, -8.010794222354888916e-02,  2.672027945518493652e-01,  8.580386638641357422e-02, -1.305228918790817261e-01, -1.272105723619461060e-01,  8.457679301500320435e-02,  3.488358855247497559e-01, -2.009223029017448425e-02, -1.093879818916320801e+00, -4.986212253570556641e-01,  4.345642566680908203e+00, -4.357909202575683594e+00,  6.071091294288635254e-01,  1.259451031684875488e+00, -8.654526621103286743e-02, -6.037377715110778809e-01, -8.010794222354888916e-02,  2.672027945518493652e-01,  8.580386638641357422e-02, -1.305228918790817261e-01, -1.272105723619461060e-01,  8.457679301500320435e-02,  3.488358855247497559e-01;

        bs_data <<
        0.000000000000000000e+00,  1.932703298734850250e-06,  8.077974780462682247e-04,  4.521377559285610914e-05, -1.874262280762195587e-02, -6.522561609745025635e-02, -8.230274915695190430e-02,  2.642836607992649078e-02,  2.327411174774169922e-01,  3.413152992725372314e-01,  1.227864623069763184e+00,  2.014226913452148438e+00,  2.908429622650146484e+00,  3.960784435272216797e+00,  5.057759761810302734e+00,  6.100389480590820312e+00,  7.093181133270263672e+00,  8.066276550292968750e+00,  9.084129333496093750e+00,  1.036534214019775391e+01,  1.180069160461425781e+01,  1.232573223114013672e+01,  1.131108665466308594e+01,  1.074815082550048828e+01,  1.330976963043212891e+01,  1.859861731529235840e+00,  4.460544109344482422e+00,  3.732791900634765625e+00,  2.200050830841064453e+00,  2.483813285827636719e+00,  4.351030826568603516e+00,  6.145648956298828125e+00,  7.253118991851806641e+00,  8.129192352294921875e+00,  9.151144981384277344e+00,  1.044653034210205078e+01,  1.183446979522705078e+01,  1.231758117675781250e+01,  1.130107307434082031e+01,  1.074649238586425781e+01,  1.330976963043212891e+01,  1.859861731529235840e+00,  4.460544109344482422e+00,  3.732791900634765625e+00,  2.200050830841064453e+00,  2.483813285827636719e+00,  4.351030826568603516e+00,  6.145648956298828125e+00,  7.253118991851806641e+00,  8.129192352294921875e+00,
        1.932703298734850250e-06,  8.077974780462682247e-04,  4.521377559285610914e-05, -1.874262280762195587e-02, -6.522561609745025635e-02, -8.230274915695190430e-02,  2.642836607992649078e-02,  2.327411174774169922e-01,  3.413152992725372314e-01,  1.227864623069763184e+00,  2.014226913452148438e+00,  2.908429622650146484e+00,  3.960784435272216797e+00,  5.057759761810302734e+00,  6.100389480590820312e+00,  7.093181133270263672e+00,  8.066276550292968750e+00,  9.084129333496093750e+00,  1.036534214019775391e+01,  1.180069160461425781e+01,  1.232573223114013672e+01,  1.131108665466308594e+01,  1.074815082550048828e+01,  1.330976963043212891e+01,  1.859861731529235840e+00,  4.460544109344482422e+00,  3.732791900634765625e+00,  2.200050830841064453e+00,  2.483813285827636719e+00,  4.351030826568603516e+00,  6.145648956298828125e+00,  7.253118991851806641e+00,  8.129192352294921875e+00,  9.151144981384277344e+00,  1.044653034210205078e+01,  1.183446979522705078e+01,  1.231758117675781250e+01,  1.130107307434082031e+01,  1.074649238586425781e+01,  1.330976963043212891e+01,  1.859861731529235840e+00,  4.460544109344482422e+00,  3.732791900634765625e+00,  2.200050830841064453e+00,  2.483813285827636719e+00,  4.351030826568603516e+00,  6.145648956298828125e+00,  7.253118991851806641e+00,  8.129192352294921875e+00,  9.151144981384277344e+00,
        3.865406597469700500e-06,  1.613662228919565678e-03, -7.173699559643864632e-04, -3.753045201301574707e-02, -1.117086112499237061e-01, -9.937988221645355225e-02,  1.351594924926757812e-01,  4.390538632869720459e-01,  4.498895108699798584e-01,  2.114413738250732422e+00,  2.800589561462402344e+00,  3.802632570266723633e+00,  5.013139247894287109e+00,  6.154734611511230469e+00,  7.142988681793212891e+00,  8.073139190673828125e+00,  9.077331542968750000e+00,  1.036529064178466797e+01,  1.180127239227294922e+01,  1.232242774963378906e+01,  1.130833053588867188e+01,  1.074807167053222656e+01,  1.331033420562744141e+01,  1.859972357749938965e+00,  4.460544109344482422e+00,  3.732791900634765625e+00,  2.200050830841064453e+00,  2.483813285827636719e+00,  4.351030826568603516e+00,  6.145648956298828125e+00,  7.253118991851806641e+00,  8.129192352294921875e+00,  9.151144981384277344e+00,  1.044653034210205078e+01,  1.183446979522705078e+01,  1.231758117675781250e+01,  1.130107307434082031e+01,  1.074649238586425781e+01,  1.330976963043212891e+01,  1.859861731529235840e+00,  4.460544109344482422e+00,  3.732791900634765625e+00,  2.200050830841064453e+00,  2.483813285827636719e+00,  4.351030826568603516e+00,  6.145648956298828125e+00,  7.253118991851806641e+00,  8.129192352294921875e+00,  9.151144981384277344e+00,  1.044653034210205078e+01,
        5.798109668830875307e-06,  2.419527154415845871e-03, -1.479953411035239697e-03, -5.631829425692558289e-02, -1.581916064023971558e-01, -1.164570078253746033e-01,  2.438906133174896240e-01,  6.453666687011718750e-01,  5.584636330604553223e-01,  3.000963211059570312e+00,  3.586951971054077148e+00,  4.696834564208984375e+00,  6.065493583679199219e+00,  7.251679420471191406e+00,  8.172755241394042969e+00,  9.091057777404785156e+00,  1.035169601440429688e+01,  1.180116748809814453e+01,  1.232358837127685547e+01,  1.130172157287597656e+01,  1.074256038665771484e+01,  1.331017589569091797e+01,  1.861101031303405762e+00,  4.460765361785888672e+00,  3.732791900634765625e+00,  2.200050830841064453e+00,  2.483813285827636719e+00,  4.351030826568603516e+00,  6.145648956298828125e+00,  7.253118991851806641e+00,  8.129192352294921875e+00,  9.151144981384277344e+00,  1.044653034210205078e+01,  1.183446979522705078e+01,  1.231758117675781250e+01,  1.130107307434082031e+01,  1.074649238586425781e+01,  1.330976963043212891e+01,  1.859861731529235840e+00,  4.460544109344482422e+00,  3.732791900634765625e+00,  2.200050830841064453e+00,  2.483813285827636719e+00,  4.351030826568603516e+00,  6.145648956298828125e+00,  7.253118991851806641e+00,  8.129192352294921875e+00,  9.151144981384277344e+00,  1.044653034210205078e+01,  1.183446979522705078e+01;

        bp_data <<
        0.000000000000000000e+00,  4.629098384612007067e-06,  9.864197345450520515e-04,  1.068718192982487381e-04, -2.240565977990627289e-02, -7.814860343933105469e-02, -9.839028120040893555e-02,  3.288062661886215210e-02,  2.817492783069610596e-01,  4.132848680019378662e-01,  2.780269682407379150e-01,  2.249700389802455902e-02, -1.030722856521606445e-01, -3.817702084779739380e-02,  8.058822900056838989e-02,  1.341467052698135376e-01,  1.278538852930068970e-01,  9.785618633031845093e-02,  1.215365156531333923e-01,  4.616879224777221680e-01,  9.867434501647949219e-01,  4.160950183868408203e-01, -2.007402896881103516e+00, -3.888159275054931641e+00, -2.010699272155761719e+00,  2.257997751235961914e+00,  4.182351589202880859e+00,  2.102981090545654297e+00, -9.444554448127746582e-01, -1.806372523307800293e+00, -7.630620598793029785e-01,  1.933672577142715454e-01,  3.236076831817626953e-01,  1.757823824882507324e-01,  2.035617977380752563e-01,  5.601723790168762207e-01,  1.027806162834167480e+00,  4.064843654632568359e-01, -2.019380569458007812e+00, -3.890141487121582031e+00, -2.010699272155761719e+00,  2.257997751235961914e+00,  4.182351589202880859e+00,  2.102981090545654297e+00, -9.444554448127746582e-01, -1.806372523307800293e+00, -7.630620598793029785e-01,  1.933672577142715454e-01,  3.236076831817626953e-01,  1.757823824882507324e-01,
        4.629098384612007067e-06,  9.864197345450520515e-04,  1.068718192982487381e-04, -2.240565977990627289e-02, -7.814860343933105469e-02, -9.839028120040893555e-02,  3.288062661886215210e-02,  2.817492783069610596e-01,  4.132848680019378662e-01,  2.780269682407379150e-01,  2.249700389802455902e-02, -1.030722856521606445e-01, -3.817702084779739380e-02,  8.058822900056838989e-02,  1.341467052698135376e-01,  1.278538852930068970e-01,  9.785618633031845093e-02,  1.215365156531333923e-01,  4.616879224777221680e-01,  9.867434501647949219e-01,  4.160950183868408203e-01, -2.007402896881103516e+00, -3.888159275054931641e+00, -2.010699272155761719e+00,  2.257997751235961914e+00,  4.182351589202880859e+00,  2.102981090545654297e+00, -9.444554448127746582e-01, -1.806372523307800293e+00, -7.630620598793029785e-01,  1.933672577142715454e-01,  3.236076831817626953e-01,  1.757823824882507324e-01,  2.035617977380752563e-01,  5.601723790168762207e-01,  1.027806162834167480e+00,  4.064843654632568359e-01, -2.019380569458007812e+00, -3.890141487121582031e+00, -2.010699272155761719e+00,  2.257997751235961914e+00,  4.182351589202880859e+00,  2.102981090545654297e+00, -9.444554448127746582e-01, -1.806372523307800293e+00, -7.630620598793029785e-01,  1.933672577142715454e-01,  3.236076831817626953e-01,  1.757823824882507324e-01,  2.035617977380752563e-01,
        9.258196769224014133e-06,  1.968210330232977867e-03, -7.726761396043002605e-04, -4.491819441318511963e-02, -1.338915526866912842e-01, -1.186319515109062195e-01,  1.641515344381332397e-01,  5.306178331375122070e-01,  5.448205471038818359e-01,  1.427690386772155762e-01, -2.330330610275268555e-01, -2.286418378353118896e-01,  2.671839110553264618e-02,  1.993534713983535767e-01,  1.876306682825088501e-01,  1.060008034110069275e-01,  1.132745966315269470e-01,  4.615627527236938477e-01,  9.873986244201660156e-01,  4.120917320251464844e-01, -2.010734081268310547e+00, -3.888263225555419922e+00, -2.010024070739746094e+00,  2.258129835128784180e+00,  4.182351589202880859e+00,  2.102981090545654297e+00, -9.444554448127746582e-01, -1.806372523307800293e+00, -7.630620598793029785e-01,  1.933672577142715454e-01,  3.236076831817626953e-01,  1.757823824882507324e-01,  2.035617977380752563e-01,  5.601723790168762207e-01,  1.027806162834167480e+00,  4.064843654632568359e-01, -2.019380569458007812e+00, -3.890141487121582031e+00, -2.010699272155761719e+00,  2.257997751235961914e+00,  4.182351589202880859e+00,  2.102981090545654297e+00, -9.444554448127746582e-01, -1.806372523307800293e+00, -7.630620598793029785e-01,  1.933672577142715454e-01,  3.236076831817626953e-01,  1.757823824882507324e-01,  2.035617977380752563e-01,  5.601723790168762207e-01,
        1.388729469908867031e-05,  2.950001042336225510e-03, -1.652224222198128700e-03, -6.743072718381881714e-02, -1.896345019340515137e-01, -1.388736367225646973e-01,  2.954224348068237305e-01,  7.794865369796752930e-01,  6.763561964035034180e-01,  7.511255796998739243e-03, -4.885631203651428223e-01, -3.542110919952392578e-01,  9.161402285099029541e-02,  3.180446624755859375e-01,  2.255546450614929199e-01,  1.295640617609024048e-01,  4.450389146804809570e-01,  9.871482849121093750e-01,  4.134020805358886719e-01, -2.018740653991699219e+00, -3.894926071166992188e+00, -2.010231971740722656e+00,  2.259480237960815430e+00,  4.182615756988525391e+00,  2.102981090545654297e+00, -9.444554448127746582e-01, -1.806372523307800293e+00, -7.630620598793029785e-01,  1.933672577142715454e-01,  3.236076831817626953e-01,  1.757823824882507324e-01,  2.035617977380752563e-01,  5.601723790168762207e-01,  1.027806162834167480e+00,  4.064843654632568359e-01, -2.019380569458007812e+00, -3.890141487121582031e+00, -2.010699272155761719e+00,  2.257997751235961914e+00,  4.182351589202880859e+00,  2.102981090545654297e+00, -9.444554448127746582e-01, -1.806372523307800293e+00, -7.630620598793029785e-01,  1.933672577142715454e-01,  3.236076831817626953e-01,  1.757823824882507324e-01,  2.035617977380752563e-01,  5.601723790168762207e-01,  1.027806162834167480e+00;
    }
};

TEMPLATE_TEST_CASE_SIG("FIR Filter with predefined parameters", "[fir]",
    ((typename Scalar, int NChan, bool DynOrder), Scalar, NChan, DynOrder), 
    (float,  Dynamic, true), 
    (double, Dynamic, true), 
    (float,  nchan,   true), 
    (double, nchan,   true), 
    (float,  Dynamic, false),
    (double, Dynamic, false),
    (float,  nchan,   false),
    (double, nchan,   false)
) {
    const TestFixtureFIR<Scalar> fix;
    Array<Scalar, Dynamic, Dynamic> y(nchan, ndata);
    using Filter = fir<Array<Scalar, NChan, 1>, DynOrder ? Dynamic : 5>;

    SECTION("in_place", "FIR filter applied in place") {
        Filter f(fix.fir_params);
        y = fix.raw_data;
        f.apply(y.block(0,  0, nchan,       10));
        f.apply(y.block(0, 10, nchan, ndata-10));
        Scalar maxdev = (fix.fir_data - y).abs().maxCoeff();
        REQUIRE( maxdev <= threshold<Scalar>() );
    }

    SECTION("to_other", "FIR filter applied into another array") {
        Filter f(fix.fir_params);
        f.apply(fix.raw_data.block(0,  0, nchan,       10), y.block(0,  0, nchan,       10));
        f.apply(fix.raw_data.block(0, 10, nchan, ndata-10), y.block(0, 10, nchan, ndata-10));
        Scalar maxdev = (fix.fir_data - y).abs().maxCoeff();
        REQUIRE( maxdev <= threshold<Scalar>() );
    }

    SECTION("update_only", "FIR filter state updated without applying it") {
        Filter f(fix.fir_params);
        y = fix.raw_data;
        f.apply(y.block(0,  0, nchan,       10), dry_run);
        f.apply(y.block(0, 10, nchan, ndata-10));
        Scalar maxdev0 = (fix.raw_data.block(0,  0, nchan,       10) - y.block(0,  0, nchan,       10)).abs().maxCoeff();
        Scalar maxdev1 = (fix.fir_data.block(0, 10, nchan, ndata-10) - y.block(0, 10, nchan, ndata-10)).abs().maxCoeff();
        REQUIRE( maxdev0 == 0 );
        REQUIRE( maxdev1 <= threshold<Scalar>() );
    }

}

TEMPLATE_TEST_CASE_SIG("FIR filter with designed with an asymmetric Blackman window", "[fir]",
    ((typename Scalar, int NChan, bool DynOrder), Scalar, NChan, DynOrder), 
    (float,  Dynamic, true), 
    (double, Dynamic, true), 
    (float,  nchan,   true), 
    (double, nchan,   true), 
    (float,  Dynamic, false),
    (double, Dynamic, false),
    (float,  nchan,   false),
    (double, nchan,   false)
) {
    const TestFixtureFIR<Scalar> fix;
    Array<Scalar, Dynamic, Dynamic> y(nchan, ndata);
    using Filter = fir<Array<Scalar, NChan, 1>, DynOrder ? Dynamic : 25>;

    fir_window window = blackman(9, 15);
    fir_design designs[4] = {
        fir_design(window, lowpass(.234)),
        fir_design(window, highpass(.456)),
        fir_design(window, bandstop(.234, .456)),
        fir_design(window, bandpass(.234, .456))
    };

    Array<Scalar, Dynamic, Dynamic> y_data[4] = { fix.lp_data, fix.hp_data, fix.bs_data, fix.bp_data };

    for (size_t i=0; i<4; ++i) {
        Filter f(designs[i]);
        f.apply(fix.raw_data, y);
        Scalar maxdev = (y_data[i] - y).abs().maxCoeff();
        REQUIRE( maxdev <= 1e-5 );
    }
}

